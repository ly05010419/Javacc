options
{
  STATIC = false;
}

PARSER_BEGIN(NewAdder)
package NewAdder;
import java.io.FileReader;

public class NewAdder
{
  double previousValue = 0.0;
  
  public static void main(String [] args) throws Exception
  {
    FileReader reader = new FileReader("./assets/test4.txt");
    NewAdder newAdder = new NewAdder(reader);
    newAdder.easyCalculator();
  }
}

PARSER_END(NewAdder)

SKIP :
{
  " "
}

TOKEN :
{
  < EOL :
    "\n"
  | "\r"
  | "\r\n" >
}

TOKEN :
{
  < INT : "int" >
}

TOKEN :
{
  < IF: "if" >
}


TOKEN :
{
  < STRING : (["a"-"z","A"-"Z"]) + (["0"-"9"])* >
}

TOKEN :
{
  < NUMBER : ([ "0"-"9" ])+ >
}

TOKEN :
{
  < PLUS : "+" >
}

TOKEN :
{
  < MINUS : "-" >
}

TOKEN :
{
  < MULIPIKATION : "*" >
}

TOKEN :
{
  < DIVISION : "/" >
}

TOKEN :
{
  < EQUEAL : "=" >
}

TOKEN :
{
  < LPRANRENT : "(" >
}

TOKEN :
{
  < RPRANRENT : ")" >
}

TOKEN :
{
  < LMPRANRENT : "[" >
}

TOKEN :
{
  < RMPRANRENT : "]" >
}

TOKEN :
{
  < LPAR : "{" >
}

TOKEN :
{
  < RPAR : "}" >
}

TOKEN :
{
  < COLON : ";" >
}

TOKEN :
{
  < COMMA : "," >
}





//int[2] A3 = {1,22};
public void parseExpress() :
{}
{
  < INT > <LMPRANRENT > < NUMBER > <RMPRANRENT > < STRING> < EQUEAL> < LPAR > < NUMBER > (<COMMA >< NUMBER >)* <RPAR > < COLON > < EOF >
}

//if(){}
public void parseIf() :
{}
{
  < IF > <LPRANRENT >  <RPRANRENT >< LPAR > <RPAR >  < EOF >
}




//1+1
public void parse() :
{}
{
  < NUMBER > ( < PLUS > | < MINUS > | < MULIPIKATION > |< DIVISION > ) < NUMBER > < EOF >
}

//一个简单的解释器 哈哈 可以识别并执行简单的加法 1+1，1+5+13
public void add() : 
{
  	Token t;
  	int i;
  	int value;
}
{
	t=<NUMBER>
	{
	  	i=Integer.parseInt(t.image);
	  	value=i; 
	}
	(
		<PLUS>
		t=<NUMBER>
		{
			i=Integer.parseInt(t.image);
			value+=i;
		}
	)*
	<EOF>
	{
		System.out.println("add : "+value);
	}
}


//一个稍微复杂点的解释器 可以识别并执行简单的加法 1+2,5-3,2*3,9/3
public void easyCalculator() throws Exception :
{
  double i;
  double value;
}
{
  value = primary()
  (
    < PLUS > i = primary()
    {
      value += i;
    }
  	| < MINUS > i = primary()
    {
      value -= i;
    }
    | < MULIPIKATION > i = primary()
    {
      value *= i;
    }
    | < DIVISION > i = primary()
    {
      value /= i;
    }
   
  )*
  {
   System.out.println("complexAdd : "+value);
  }
}

double primary() throws Exception :
{
  Token t;
}
{
  t = < NUMBER >
  {
    return Double.parseDouble(t.image);
  }
}
