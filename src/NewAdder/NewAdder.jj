options
{
  STATIC = false;
}

PARSER_BEGIN(NewAdder)
package NewAdder;
import java.io.FileReader;

public class NewAdder
{
  double previousValue = 0.0;

  public static void main(String [] args) throws Exception
  {
    FileReader reader = new FileReader("./assets/test5.txt");
    NewAdder newAdder = new NewAdder(reader);
    newAdder.easyCalculator();
  }
}

PARSER_END(NewAdder)

SKIP :
{
  " "
}

TOKEN :
{
  < EOL :
    "\n"
  | "\r"
  | "\r\n" >
}

TOKEN :
{
  < INT : "int" >
}

TOKEN :
{
  < IF : "if" >
}

TOKEN :
{
  < STRING : ([ "a"-"z", "A"-"Z" ])+ ([ "0"-"9" ])* >
}

TOKEN :
{
  < NUMBER :
    < DIGITS >
  | < DIGITS > "." < DIGITS >
  | < DIGITS > "."
  | "." < DIGITS > >
}

TOKEN :
{
  < #DIGITS : ([ "0"-"9" ])+ >
}

TOKEN :
{
  < PLUS : "+" >
}

TOKEN :
{
  < MINUS : "-" >
}

TOKEN :
{
  < MULIPIKATION : "*" >
}

TOKEN :
{
  < DIVISION : "/" >
}

TOKEN :
{
  < EQUEAL : "=" >
}

TOKEN :
{
  < LMPRANRENT : "[" >
}

TOKEN :
{
  < RMPRANRENT : "]" >
}

TOKEN :
{
  < LPAR : "{" >
}

TOKEN :
{
  < RPAR : "}" >
}

TOKEN :
{
  < COLON : ";" >
}

TOKEN :
{
  < COMMA : "," >
}

TOKEN :
{
  < OPEN_PAR : "(" >
}

TOKEN :
{
  < CLOSE_PAR : ")" >
}

//支持小数和带括号的复杂的加减乘除的解释器 (1.5+2.5)*(5.5+4.5)+(1.5+1.5)*(5.5+4.5)
public void easyCalculator() throws Exception :
{}
{
  (
    previousValue = Expression()
    {
      System.out.println(previousValue);
    }
  )*
}

double Expression() throws NumberFormatException :
{
  double i;
  double value;
}
{
  value = Term()
  (
    < PLUS > 
    i = Term()
    {
      value += i;
    }
  | 
    < MINUS > 
    i = Term()
    {
      value -= i;
    }
  )*
  {
    return value;
  }
}

double Term() throws NumberFormatException :
{
  double i;
  double value;
}
{
  value = Primary()
  (
    < MULIPIKATION > 
    i = Primary()
    {
      value *= i;
    }
  | 
    < DIVISION > 
    i = Primary()
    {
      value /= i;
    }
  )*
  {
    return value;
  }
}

double Primary() throws NumberFormatException :
{
  Token t;
  double d;
}
{
  t = < NUMBER >
  {
    return Double.parseDouble(t.image);
  }
| 
  < OPEN_PAR > d = Expression() < CLOSE_PAR >
  {
    return d;
  }
}
