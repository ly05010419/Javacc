options
{
  STATIC = false;
}

PARSER_BEGIN(NewAdder)
package NewAdder;
import java.io.FileReader;

public class NewAdder
{
  double previousValue = 0.0;

  public static void main(String [] args) throws Exception
  {
    FileReader reader = new FileReader("./assets/test6.txt");
    NewAdder newAdder = new NewAdder(reader);
    newAdder.parseIf();
  }
}

PARSER_END(NewAdder)

SKIP :
{
  " "
| "\n"
| "\r"
| "\r\n"
| "\t"
}

TOKEN :
{
  < INT : "int" >
}

TOKEN :
{
  < IF : "if" >
}

TOKEN :
{
  < STRING : ([ "a"-"z", "A"-"Z" ])+ ([ "0"-"9" ])* >
}

TOKEN :
{
  < NUMMER :
    < DIGITS >
  | < DIGITS > "." < DIGITS >
  | < DIGITS > "."
  | "." < DIGITS > >
}

TOKEN :
{
  < #DIGITS : ([ "0"-"9" ])+ >
}

TOKEN :
{
  < PLUS : "+" > |< MINUS : "-" > |< MULIPIKATION : "*" >| < DIVISION : "/" >
}

TOKEN :
{
  < EQUEAL : "=" >
}

TOKEN :
{
  < LMPRANRENT : "[" > |< RMPRANRENT : "]" >
}

TOKEN :
{
  < OPEN_PAR : "(" > | < CLOSE_PAR : ")" >
}


TOKEN :
{
  < LPAR : "{" > |< RPAR : "}" >
}


TOKEN :
{
  < COLON : ";" >
}

TOKEN :
{
  < COMMA : "," >
}



TOKEN :
{
  < GROSS : ">" >|< GROSS_GLEICH : "=>" > |< KLEIN : "<" >|< KLEIN_GLEICH : "<=" >
}



TOKEN :
{
  < AND :( "AND" | "&&" ) > | < OR :( "OR" | "||" ) > | < NOT : ( "NOT"| "!" ) >
}

//识别一个带表达式的if语句
public void parseIf() :
{}
{
  < IF > < OPEN_PAR > bediennung() ((<AND>|<OR>|<NOT>)bediennung())* < CLOSE_PAR > < LPAR > Expression() < COLON > < RPAR > < EOF >
}

public void bediennung() :
{
}
{
  < NUMMER >
  (
    < GROSS >
  | < GROSS_GLEICH >
  | < KLEIN >
  | < KLEIN_GLEICH >
  )
  < NUMMER >
}

public void Expression() throws NumberFormatException :
{
}
{
  Term()
  (
    < PLUS > 
    Term()
  | 
    < MINUS > 
    Term()
  )*
}

public void Term() throws NumberFormatException :
{
}
{
  Primary()
  (
    < MULIPIKATION > 
    Primary()
  | 
    < DIVISION > 
    Primary()
  )*
}

public void Primary() throws NumberFormatException :
{
}
{
  < NUMMER >
| 
  < OPEN_PAR > Expression() < CLOSE_PAR >
}
